#!/bin/bash

set -efu

RULES=
ARGS=
INDEX=
MATCH=
SUBST=
TMP=
DEBUG=

usage() {
  cat <<EOF
USAGE: $0 [-x] <program> [args ...]

    -x  debug mode
EOF
  exit
}
init() {
  local line
  (($#)) || usage
  case "$1" in
    -x) DEBUG=on; shift;;
    -*) usage;;
  esac
  RULES=()
  while read -r line; do
    RULES+=("$line")
  done <"$1"
  shift
  ARGS=('$$' "$@")
  INDEX=0
}
load-rule() {
  local r=() x var=MATCH ifs=$IFS
  IFS=$'\t'
  r=(${RULES[$INDEX]})
  IFS=$ifs
  MATCH=()
  SUBST=()
  for x in "${r[@]}"; do
    if [[ "$x" == '$' ]]; then
      var=SUBST
    else
      eval "$var"'+=("$x")'
    fi
  done
}
pattern-match() {
  local i
  load-rule
  for ((i=0; i<${#MATCH[@]}; i++)); do
    ((i < ${#ARGS[@]})) || return
    [[ "${ARGS[$i]}" == ${MATCH[$i]} ]] || return
  done
}
scan-match() {
  local i
  for ((INDEX=0; INDEX<${#RULES[@]}; INDEX++)); do
    pattern-match && return
  done
  return 1
}
subst() {
  local a b i=0
  for ((i=0; i<${#ARGS[@]}; i++)); do
    a=${ARGS[$i]}
    b='$'$i
    TMP=${TMP//$b/$a}
  done
}
rewrite() {
  local a=()
  for TMP in "${SUBST[@]}"; do
    subst
    a+=("$TMP")
  done
  TMP=("${a[@]}")
}
debug() {
  test -z "$DEBUG" && return
  local a=() r=() tmp=() ifs=$IFS
  tmp=("${TMP[@]}")
  a=(args:$INDEX: "${ARGS[@]}" '$' "${TMP[@]}")
  load-rule
  r=(rule:$INDEX: "${MATCH[@]}" '$' "${SUBST[@]}")
  IFS=$'\t'
  echo "${r[*]}" >&2
  echo "${a[*]}" >&2
  IFS=$ifs
  TMP=("${tmp[@]}")
}
run() {
  local a=()
  while scan-match; do
    rewrite
    debug
    ARGS=("${TMP[@]}")
  done
  echo "${ARGS[@]}"
}

init "$@"
run
