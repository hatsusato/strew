#!/bin/bash

set -efu

declare -r L='{' R='}' D='$' B='\' S=' ' Q="'" QQ='"'
declare -r B2=$B BB=$B$B BD=$B$D

usage() {
  cat <<EOF >&2
USAGE: $0 [-v] <program> [args ...]

    -v  debug mode
EOF
  exit 1
}
error-eof() {
  cat <<EOF >&2
ERROR: no newline at end of file
EOF
  exit 1
}
error-halt() {
  local ifs=$IFS
  IFS=$'\t'
  local msg=${ARGS[*]}
  IFS=$ifs
  cat <<EOF >&2
ERROR: no transition rule:
$msg
EOF
  exit 1
}
error-missing() {
  cat <<EOF >&2
ERROR: missing subst after match:
$2
EOF
  exit 1
}
error-option() {
  cat <<EOF >&2
ERROR: unknown option: $2
EOF
  usage
}
escape() {
  local opts=()
  opts+=(-e s"/$L/{L}/"g)
  opts+=(-e s"/$R/{R}/"g)
  opts+=(-e s"/{L${L}R}/{L}/"g)
  opts+=(-e s"/$B$D/{D}/"g)
  opts+=(-e s"/$B$B/{B}/"g)
  opts+=(-e s"/$S/{S}/"g)
  opts+=(-e s"/$Q/{Q}/"g)
  opts+=(-e s"/$QQ/{QQ}/"g)
  sed "${opts[@]}"
}
unescape() {
  local tmp=$(sed -e s"/\({[^{}]*}\)/$BD\1/"g)
  eval echo "$tmp"
}
escape-match() {
  local opts=()
  opts+=(-e s'/{B}{B}/{BB}/'g)
  opts+=(-e s"/{D}/{BD}/"g)
  opts+=(-e s"/{B}$/{BB}/"g)
  escape | sed "${opts[@]}" | unescape
}
read-line() {
  local line err=0 ifs=$IFS
  IFS=
  read -r line || err=$?
  echo "$line"
  IFS=$ifs
  return $err
}
parse-rule() {
  local i line msg prev=
  COUNT=0
  for ((i=1; ; i++)); do
    if ! line=$(read-line); then
      test "$line" && error-eof
      test "$prev" && error-missing "$msg"
      break
    fi
    if ! test "$prev"; then
      if test "$line"; then
        prev=$line
        msg="line:$i: $line"
      fi
    else
      test "$line" || error-missing "$msg"
      eval MATCH_$COUNT='$prev'
      eval SUBST_$COUNT='$line'
      declare -r MATCH_$COUNT SUBST_$COUNT
      ((COUNT+=1))
      prev=
    fi
  done
  declare -r COUNT
}
init() {
  (($#)) || usage
  case "$1" in
    -v) DEBUG=on; shift;;
    -*) error-option "$1";;
  esac
  parse-rule <"$1"
  shift
  ARGS=('$' "$@")
}
load-pattern() {
  local match=MATCH_$1
  local subst=SUBST_$1
  local ifs=$IFS
  IFS=$'\t'
  MATCH=(${!match})
  SUBST=(${!subst})
  IFS=$ifs
}
pattern-match() {
  local match
  set -- "${ARGS[@]}"
  for match in "${MATCH[@]}"; do
    (($#)) || return
    match=$(escape-match <<<"$match")
    [[ "$1" =~ ^$match$ ]] || return
    shift
  done
}
scan-match() {
  local i
  for ((i=0; i<COUNT; i++)); do
    load-pattern "$i"
    pattern-match && return
  done
  return 1
}
escape-subst() {
  local arg opts=()
  opts+=(-e s'/{B}{B}/{B2}/'g)
  opts+=(-e s"/{B}{D}/{BD}/"g)
  for arg in "${args[@]}"; do
    opts+=(-e s"/{D}${arg#arg}/{$arg}/"g)
  done
  escape | sed "${opts[@]}" | unescape
}
rewrite() {
  local i args subst
  local -r count=${#MATCH[@]}
  for ((i=0; i<count; i++)); do
    local -r arg$i="${ARGS[$i]}"
    args+=(arg$i)
  done
  declare -r args
  UPDATE=()
  for subst in "${SUBST[@]}"; do
    subst=$(escape-subst <<<"$subst")
    UPDATE+=("$subst")
  done
  UPDATE+=("${ARGS[@]:count}")
}
debug() {
  local prefix ifs=$IFS
  test -z "${DEBUG-}" && return
  IFS=$'\t'
  echo " -> ${ARGS[*]}"
  IFS=$ifs
}
run() {
  while scan-match; do
    rewrite
    debug
    ARGS=("${UPDATE[@]}")
  done
  echo "${ARGS[@]}"
}

init "$@"
run
