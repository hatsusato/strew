#!/bin/bash

set -efu

declare -r LC='{' RC='}' LP='(' RP=')' B='\' C='^' D='$'
declare -r S=' ' N=$'\n' T=$'\t' G='`' Q="'" QQ='"'
declare -r B2=$B BB=$B$B BC=$B$C BD=$B$D

# utility
defined() {
  local -n var_=$1
  test "${var_+set}"
}
concat() {
  local -n var_=$1
  local ifs=$IFS
  IFS=$DELIM
  echo "${var_[*]@Q}" | sed -e s"/$Q$BB$Q$Q/$Q/"g
  IFS=$ifs
}
split() {
  local src=$1 t=$DELIM
  local -n dst_=$2
  dst_=()
  while test "$src"; do
    if [[ $src == *$t* ]]; then
      dst_+=("${src%%$t*}")
      src=${src#*$t}
    else
      dst_+=("$src")
      src=
    fi
  done
}

# error handling
usage() {
  cat <<EOF >&2
USAGE: $0 [-d DELIM] [-h] [-q] [-x] PROGRAM [ARGS ...]

    -d  use DELIM instead of TAB for delimiter
    -h  print this help
    -q  quiet mode
    -x  debug mode
EOF
  exit 1
}
error() {
  local -i err=$?
  local cmd=$1 msg
  shift
  ((err)) || err=1
  case $cmd in
    eof) msg='no newline at end of file';;
    file) msg='file not found';;
    halt) msg='no transition rule';;
    invalid) msg='logically invalid';;
    missing) msg='missing subst after match';;
  esac
  echo ERROR: "$msg": "$@" >&2
  exit $err
}

# escape
escape-prepare() {
  local -n opts_=$1
  opts_+=(-e s"/$LC/{LC}/"g)
  opts_+=(-e s"/$RC/{RC}/"g)
  opts_+=(-e s"/{LC${LC}RC}/{LC}/"g)
  opts_+=(-e s"/$BB/{B}/"g)
  opts_+=(-e s"/$G/{G}/"g)
  opts_+=(-e s"/$Q/{Q}/"g)
  opts_+=(-e s"/$QQ/{QQ}/"g)
  opts_+=(-e s"/{B}\([abtnvfr]\)/{BB}\1/"g)
}
escape() {
  local -n opts_=ESCAPE_"$1"_OPTS
  local tmp LB='\['
  if ! defined ESCAPE_MATCH_OPTS; then
    declare -ag ESCAPE_MATCH_OPTS
    escape-prepare ESCAPE_MATCH_OPTS
    ESCAPE_MATCH_OPTS+=(-e s"/{B}{B}/{BB}/"g)
    ESCAPE_MATCH_OPTS+=(-e s"/{B}$D/{BB}/"g)
    ESCAPE_MATCH_OPTS+=(-e s"/$BC/{BC}/"g)
    ESCAPE_MATCH_OPTS+=(-e s"/$BD/{BD}/"g)
    ESCAPE_MATCH_OPTS+=(-e s"/$LP/{LP}/"g)
    ESCAPE_MATCH_OPTS+=(-e s"/$RP/{RP}/"g)
    ESCAPE_MATCH_OPTS+=(-e s"/\({L[CR]}\)/{B}\1/"g)
    ESCAPE_MATCH_OPTS+=(-e s"/$LB{BC}/$LB{C}/"g)
    declare -gr ESCAPE_MATCH_OPTS
  fi
  if ! defined ESCAPE_SUBST_OPTS; then
    declare -ag ESCAPE_SUBST_OPTS
    escape-prepare ESCAPE_SUBST_OPTS
    ESCAPE_SUBST_OPTS+=(-e s"/$BD/{D}/"g)
    ESCAPE_SUBST_OPTS+=(-e s"/{B}{B}/{B2}/"g)
    ESCAPE_SUBST_OPTS+=(-e s"/{B}\([0-9][0-9]\)/{REMATCH[\1]}/"g)
    declare -gr ESCAPE_SUBST_OPTS
  fi
  tmp=$(sed "${opts_[@]}" -e s"/\({[^{}]*}\)/$BD\1/"g)
  eval echo "$QQ$tmp$QQ"
}

# initialization
read-line() {
  local -i err=0
  local ifs=$IFS
  IFS=
  read -r $1 || err=$?
  IFS=$ifs
  return $err
}
parse-rules() {
  declare -ig COUNT=0
  local line prev= msg
  local -i i
  for ((i=1; ; i++)); do
    if ! read-line line; then
      test "$line" && error eof
      test "$prev" && error missing "$msg"
      break
    elif test "$prev"; then
      test "$line" || error missing "$msg"
      declare -ag MATCH_$COUNT SUBST_$COUNT
      split "$prev" MATCH_$COUNT
      split "$line" SUBST_$COUNT
      declare -gr MATCH_$COUNT SUBST_$COUNT
      COUNT+=1
      prev=
    elif test "$line"; then
      [[ $line == '#'* ]] && continue
      prev=$line
      msg=${N}line:$i:$S$line
    fi
  done
  declare -gr COUNT
}
parse-option() {
  declare -g DEBUG= DELIM=$T QUIET=
  local arg
  while getopts d:hqx arg; do
    case $arg in
      d) DELIM=$OPTARG;;
      q) QUIET=on;;
      x) DEBUG=on;;
      [h?]) usage;;
    esac
  done
  declare -gr DEBUG DELIM QUIET
  return $((OPTIND-1))
}
init() {
  local a
  parse-option "$@" || shift $?
  (($#)) || usage
  test -f "$1" || error file "$1"
  parse-rules <"$1"
  shift
  declare -ag ARGS=("$C")
  for a; do
    case $a in
      $'\a') a='\a';;
      $'\b') a='\b';;
      $'\t') a='\t';;
      $'\n') a='\n';;
      $'\v') a='\v';;
      $'\f') a='\f';;
      $'\r') a='\r';;
      '\'[abtnvfr]) a=$B$a;;
    esac
    ARGS+=("$a")
  done
}

# matching
scan-match() {
  declare -g MATCH SUBST
  local -i i
  for ((i=0; i<COUNT; i++)); do
    MATCH=MATCH_$i
    SUBST=SUBST_$i
    pattern-match && return
  done
  error halt
}
pattern-match() {
  local -n match_=$MATCH
  local -i i=0
  local match arg
  for match in "${match_[@]}"; do
    ((i<${#ARGS[@]})) || return
    match=$(escape MATCH <<<"$match")
    arg=${ARGS[i++]}
    [[ $arg =~ ^$match$ ]] || return
  done
}

# rewriting
rematch() {
  local -n match_=$MATCH
  local -i i=0 j=0
  local match arg
  for match in "${match_[@]}"; do
    ((i<${#ARGS[@]})) || break
    match=$(escape MATCH <<<"$match")
    arg=${ARGS[i]}
    [[ $arg =~ ^$match$ ]] || error invalid
    if test $DEBUG; then
      (PS4=' DEBUG: '
       set -x
       [[ $arg =~ ^$match$ ]])
    fi
    j=(i++)*10
    for match in "${BASH_REMATCH[@]}"; do
      REMATCH[j++]=$match
    done
  done
  rest=("${ARGS[@]:i}")
}
rewrite() {
  local -n subst_=$SUBST
  local -a rest REMATCH
  local subst
  for ((j=0; j<100; j++)); do
    REMATCH[j]=
  done
  rematch
  ARGS=()
  for subst in "${subst_[@]}"; do
    subst=$(escape SUBST <<<"$subst")
    ARGS+=("$subst")
  done
  ARGS+=("${rest[@]}")
}

# entry point
debug() {
  test $QUIET || echo "--->$T$(concat ARGS)" >&2
}
run() {
  init "$@"
  debug
  while [[ ${ARGS[0]} != $D ]]; do
    scan-match
    rewrite
    debug
  done
  echo -e "${ARGS[@]:1}"
}

run "$@"
